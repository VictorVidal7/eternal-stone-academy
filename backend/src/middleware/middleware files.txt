--- Start of protect.js ---
const jwt = require('jsonwebtoken');
const User = require('../models/user');

module.exports = async (req, res, next) => {
  let token = req.header('x-auth-token') || (req.headers.authorization && req.headers.authorization.split(' ')[1]);

  if (!token) {
    return res.status(401).json({ msg: 'No token, authorization denied' });
  }

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = await User.findById(decoded.id).select('-password');
    if (!req.user) {
      return res.status(404).json({ msg: 'User not found' });
    }
    req.user.role = req.user.role || 'student'; // Asegura que siempre haya un rol
    next();
  } catch (error) {
    res.status(401).json({ msg: 'Token is not valid' });
  }
};
--- End of protect.js ---

--- Start of role.js ---
const checkRole = (roles) => (req, res, next) => {
  if (!req.user) {
    return res.status(401).json({ msg: 'No token, authorization denied' });
  }

  if (!roles.includes(req.user.role)) {
    return res.status(403).json({ msg: 'Access denied. Required role not found.' });
  }

  next();
};

module.exports = checkRole;
--- End of role.js ---

--- Start of auth.js ---
const jwt = require('jsonwebtoken');

module.exports = function (req, res, next) {
  const token = req.header('x-auth-token');
  if (!token) {
    return res.status(401).json({ msg: 'No token, authorization denied' });
  }

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = decoded;
    next();
  } catch (err) {
    res.status(401).json({ msg: 'Token is not valid' });
  }
};
--- End of auth.js ---

--- Start of errorHandler.js ---
const errorHandler = (err, req, res, next) => {
  console.error(err.stack);

  const statusCode = res.statusCode === 200 ? 500 : res.statusCode;
  res.status(statusCode);
  res.json({
    message: err.message,
    stack: process.env.NODE_ENV === 'production' ? 'ðŸ¥ž' : err.stack,
  });
};

module.exports = errorHandler;
--- End of errorHandler.js ---

--- Start of logger.js ---
const fs = require('fs');
const path = require('path');

module.exports = (req, res, next) => {
  const log = `${new Date().toISOString()} - ${req.method} - ${req.url} - ${req.ip}\n`;
  fs.appendFile(path.join(__dirname, 'access.log'), log, (err) => {
    if (err) {
      console.error('Unable to write to access.log');
    }
  });
  next();
};
--- End of logger.js ---

