--- Start of user.js ---
const mongoose = require('mongoose');
const bcrypt = require('bcrypt');

const userSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true,
  },
  email: {
    type: String,
    required: true,
    unique: true,
  },
  password: {
    type: String,
    required: true,
    minlength: 6,
  },
  role: {
    type: String,
    enum: ['admin', 'instructor', 'student'],
    default: 'student'
  },
  resetPasswordToken: String,
  resetPasswordExpire: Date,
});

userSchema.pre('save', async function (next) {
  if (!this.isModified('password')) {
    return next();
  }
  this.password = await bcrypt.hash(this.password, 10);
  next();
});

userSchema.methods.comparePassword = function (password) {
  return bcrypt.compare(password, this.password);
};

const User = mongoose.model('User', userSchema);

module.exports = User;
--- End of user.js ---

--- Start of userRoutes.js ---
const express = require('express');
const router = express.Router();
const { check, validationResult } = require('express-validator');
const userController = require('../controllers/userController');
const auth = require('../middleware/auth');
const protect = require('../middleware/protect');
const checkRole = require('../middleware/role');

router.post(
  '/register',
  [
    check('name', 'Name is required').not().isEmpty(),
    check('email', 'Please include a valid email').isEmail(),
    check('password', 'Please enter a password with 6 or more characters').isLength({ min: 6 }),
  ],
  (req, res, next) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }
    userController.registerUser(req, res, next);
  }
);

router.post(
  '/login',
  [
    check('email', 'Please include a valid email').isEmail(),
    check('password', 'Password is required').exists(),
  ],
  (req, res, next) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }
    userController.loginUser(req, res, next);
  }
);

router.put('/change-password', [auth, protect], userController.changePassword);

router.put('/:id', [auth, protect], userController.updateUser);

router.delete('/:id', [auth, protect], userController.deleteUser);

router.get('/:id', [auth, protect, checkRole(['admin', 'instructor', 'student'])], userController.getUser);

router.post('/forgot-password', userController.forgotPassword);

router.put('/reset-password/:resettoken', userController.resetPassword);

router.put('/change-role', [auth, protect, checkRole(['admin'])], userController.changeUserRole);

module.exports = router;
--- End of userRoutes.js ---

--- Start of userController.js ---
const User = require('../models/user');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcrypt');
const crypto = require('crypto');
const sendEmail = require('../utils/sendEmail');

exports.registerUser = async (req, res) => {
  console.log('Register User: Request body:', req.body);
  const { name, email, password, role } = req.body;

  try {
    if (!name || !email || !password) {
      return res.status(400).json({ errors: [{ msg: 'All fields are required' }] });
    }
    if (password.length < 6) {
      return res.status(400).json({ errors: [{ msg: 'Password must be at least 6 characters long' }] });
    }

    let user = await User.findOne({ email });
    if (user) {
      return res.status(400).json({ errors: [{ msg: 'Email already exists' }] });
    }

    user = new User({ 
      name, 
      email, 
      password,
      role: role === 'instructor' ? 'instructor' : 'student' // Solo permite 'instructor' o 'student' en el registro
    });
    await user.save();

    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1h' });
    console.log('Register User: Registered user:', user);
    console.log('Register User: Token generated:', token);

    res.status(201).json({ user: { id: user._id, name: user.name, email: user.email, role: user.role }, token });
  } catch (error) {
    console.error('Register User: Error during registration:', error.message);
    res.status(500).json({ errors: [{ msg: 'Server error' }] });
  }
};

exports.loginUser = async (req, res) => {
  console.log('Login User: Request body:', req.body);
  const { email, password } = req.body;

  try {
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(400).json({ errors: [{ msg: 'Invalid credentials' }] });
    }

    const isMatch = await user.comparePassword(password);
    console.log('Login User: Password match:', isMatch);

    if (!isMatch) {
      return res.status(400).json({ errors: [{ msg: 'Invalid credentials' }] });
    }

    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1h' });
    console.log('Login User: Token generated:', token);

    res.json({ token, user: { id: user._id, name: user.name, email: user.email, role: user.role } });
  } catch (error) {
    console.error('Login User: Error during login:', error.message);
    res.status(500).json({ errors: [{ msg: 'Server error' }] });
  }
};

exports.updateUser = async (req, res) => {
  const { name, email, password } = req.body;
  const userId = req.params.id;

  try {
    let user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({ errors: [{ msg: 'User not found' }] });
    }

    // Validaciones
    if (name && name.trim().length < 2) {
      return res.status(400).json({ errors: [{ msg: 'Name must be at least 2 characters long' }] });
    }

    if (email) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(email)) {
        return res.status(400).json({ errors: [{ msg: 'Invalid email format' }] });
      }
      
      const existingUser = await User.findOne({ email, _id: { $ne: userId } });
      if (existingUser) {
        return res.status(400).json({ errors: [{ msg: 'Email already in use' }] });
      }
    }

    if (password && password.length < 6) {
      return res.status(400).json({ errors: [{ msg: 'Password must be at least 6 characters long' }] });
    }

    // Actualización de campos
    if (name) user.name = name.trim();
    if (email) user.email = email.trim();
    if (password) {
      user.password = await bcrypt.hash(password, 10);
    }

    await user.save();

    res.json({ name: user.name, email: user.email, role: user.role });
  } catch (error) {
    console.error('Update User: Error during update:', error.message);
    if (error.name === 'ValidationError') {
      return res.status(400).json({ errors: Object.values(error.errors).map(err => ({ msg: err.message })) });
    }
    res.status(500).json({ errors: [{ msg: 'Server error' }] });
  }
};

exports.deleteUser = async (req, res) => {
  const userId = req.params.id === 'me' ? req.user.id : req.params.id;
  try {
    const user = await User.findByIdAndDelete(userId);
    if (!user) {
      return res.status(404).json({ errors: [{ msg: 'User not found' }] });
    }
    res.json({ msg: 'User deleted successfully' });
  } catch (error) {
    console.error('Delete User: Error during deletion:', error.message);
    res.status(500).json({ errors: [{ msg: 'Server error' }] });
  }
};

exports.getUser = async (req, res) => {
  console.log('GetUser: Received request for user ID:', req.params.id);
  try {
    const user = await User.findById(req.params.id).select('-password');
    console.log('GetUser: User found:', user);
    if (!user) {
      console.log('GetUser: User not found');
      return res.status(404).json({ errors: [{ msg: 'User not found' }] });
    }
    res.json(user);
  } catch (error) {
    console.error('Get User: Error during retrieval:', error.message);
    res.status(500).json({ errors: [{ msg: 'Server error' }] });
  }
};

exports.changePassword = async (req, res) => {
  console.log('Change Password: Request body:', req.body);
  console.log('Change Password: User:', req.user);
  const { currentPassword, newPassword } = req.body;
  const userId = req.user.id;

  try {
    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({ errors: [{ msg: 'User not found' }] });
    }

    const isMatch = await bcrypt.compare(currentPassword, user.password);
    if (!isMatch) {
      return res.status(400).json({ errors: [{ msg: 'Current password is incorrect' }] });
    }

    if (newPassword.length < 6) {
      return res.status(400).json({ errors: [{ msg: 'New password must be at least 6 characters long' }] });
    }

    user.password = await bcrypt.hash(newPassword, 10);
    await user.save();

    res.json({ msg: 'Password updated successfully' });
  } catch (error) {
    console.error('Change Password Error:', error);
    res.status(500).json({ errors: [{ msg: 'Server error' }] });
  }
};

exports.forgotPassword = async (req, res) => {
  const { email } = req.body;

  try {
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(404).json({ errors: [{ msg: 'User not found' }] });
    }

    const resetToken = crypto.randomBytes(20).toString('hex');
    user.resetPasswordToken = crypto.createHash('sha256').update(resetToken).digest('hex');
    user.resetPasswordExpire = Date.now() + 10 * 60 * 1000; // Token válido por 10 minutos

    await user.save();

    const resetUrl = `http://localhost:3000/reset-password/${resetToken}`;
    const message = `You are receiving this email because you (or someone else) has requested the reset of a password. Please make a PUT request to: \n\n ${resetUrl}`;

    await sendEmail({
      email: user.email,
      subject: 'Password reset token',
      message
    });

    res.json({ msg: 'Email sent' });
  } catch (error) {
    console.error('Forgot Password Error:', error);
    res.status(500).json({ errors: [{ msg: 'Email could not be sent' }] });
  }
};

exports.resetPassword = async (req, res) => {
  const resetPasswordToken = crypto.createHash('sha256').update(req.params.resettoken).digest('hex');

  try {
    const user = await User.findOne({
      resetPasswordToken,
      resetPasswordExpire: { $gt: Date.now() }
    });

    if (!user) {
      return res.status(400).json({ errors: [{ msg: 'Invalid or expired token' }] });
    }

    user.password = await bcrypt.hash(req.body.password, 10);
    user.resetPasswordToken = undefined;
    user.resetPasswordExpire = undefined;
    await user.save();

    res.json({ msg: 'Password updated successfully' });
  } catch (error) {
    console.error('Reset Password Error:', error);
    res.status(500).json({ errors: [{ msg: 'Server error' }] });
  }
};

exports.changeUserRole = async (req, res) => {
  try {
    const { userId, newRole } = req.body;
    
    // Verifica que el usuario que hace la solicitud es un admin
    if (req.user.role !== 'admin') {
      return res.status(403).json({ msg: 'Not authorized to change user roles' });
    }

    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({ msg: 'User not found' });
    }

    if (!['admin', 'instructor', 'student'].includes(newRole)) {
      return res.status(400).json({ msg: 'Invalid role' });
    }

    user.role = newRole;
    await user.save();

    res.json({ msg: 'User role updated successfully', user });
  } catch (error) {
    console.error('Change User Role Error:', error);
    res.status(500).json({ errors: [{ msg: 'Server error' }] });
  }
};
--- End of userController.js ---

