--- Start of app.js ---
const express = require('express');
const path = require('path');
const errorHandler = require('./middleware/errorHandler');
const helmet = require('helmet');
const cors = require('cors');
const rateLimit = require('express-rate-limit');
const logger = require('./middleware/logger');
require('dotenv').config();

function createApp() {
  const app = express();

  // Middleware de seguridad
  app.use(helmet());
  app.use(cors());
  app.use(rateLimit({
    windowMs: 15 * 60 * 1000,
    max: 100
  }));

  // Parseo de body
  app.use(express.json({ limit: '10kb' }));
  app.use(express.urlencoded({ extended: true, limit: '10kb' }));

  // Logging
  app.use(logger);

  // Rutas
  app.use('/api/users', require('./routes/userRoutes'));
  app.use('/api/courses', require('./routes/courseRoutes'));
  app.use('/api/admin', require('./routes/adminRoutes'));

  // Swagger setup
  if (process.env.NODE_ENV !== 'production') {
    const swaggerSetup = require(path.join(__dirname, '..', 'swagger'));
    swaggerSetup(app);
  }

  // Manejo de rutas no encontradas
  app.use((req, res, next) => {
    res.status(404).json({ message: 'Route not found' });
  });

  // Manejo de errores
  app.use(errorHandler);

  return app;
}

module.exports = createApp;
--- End of app.js ---

--- Start of server.js ---
const http = require('http');
const mongoose = require('mongoose');
const dotenv = require('dotenv');
const createApp = require('./app');
const connectDB = require('./config/db');

const env = process.env.NODE_ENV || 'development';
dotenv.config({ path: `.env.${env}` });

const port = process.env.PORT || 5000;

async function startServer() {
  try {
    await connectDB();
    const app = createApp();
    const server = http.createServer(app);

    server.listen(port, () => {
      console.log(`Server running on port ${port} in ${env} mode`);
    });

    // Manejo de cierre graceful
    const gracefulShutdown = () => {
      console.log('Shutting down gracefully');
      server.close(() => {
        console.log('HTTP server closed');
        mongoose.connection.close(false, () => {
          console.log('MongoDB connection closed');
          process.exit(0);
        });
      });
    };

    process.on('SIGTERM', gracefulShutdown);
    process.on('SIGINT', gracefulShutdown);
  } catch (error) {
    console.error('Failed to start server:', error);
    process.exit(1);
  }
}

startServer();
--- End of server.js ---

