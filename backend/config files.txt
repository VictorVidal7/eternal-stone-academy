--- Start of jest.global-setup.js ---
const { MongoMemoryServer } = require('mongodb-memory-server');
const mongoose = require('mongoose');

module.exports = async () => {
  console.log('Starting global setup...');
  try {
    const mongod = await MongoMemoryServer.create();
    const uri = mongod.getUri();
    console.log('MongoDB Memory Server started. URI:', uri);
    
    await mongoose.connect(uri, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
      driverInfo: { name: "Mongoose", version: "6.11.2" }  // Add this line
    });
    
    global.__MONGO_URI__ = uri;
    global.__MONGOD__ = mongod;
    console.log('Global setup completed successfully.');
  } catch (error) {
    console.error('Error in global setup:', error);
    throw error;
  }
};
--- End of jest.global-setup.js ---

--- Start of jest.global-teardown.js ---
module.exports = async () => {
  console.log('Starting global teardown...');
  try {
    if (global.__MONGOD__) {
      await global.__MONGOD__.stop();
      console.log('MongoDB Memory Server stopped successfully.');
    } else {
      console.warn('No MongoDB instance found to stop.');
    }
    console.log('Global teardown completed successfully.');
  } catch (error) {
    console.error('Error in global teardown:', error);
    throw error;
  }
};
--- End of jest.global-teardown.js ---

--- Start of jest.setup.js ---
const mongoose = require('mongoose');
const { MongoMemoryServer } = require('mongodb-memory-server');

let mongod;

beforeAll(async () => {
  console.log('Setting up MongoDB Memory Server');
  mongod = await MongoMemoryServer.create();
  const uri = mongod.getUri();
  console.log('MongoDB Memory Server URI:', uri);
  
  const mongooseOpts = {
    useNewUrlParser: true,
    useUnifiedTopology: true,
    serverSelectionTimeoutMS: 5000,
    driverInfo: { name: "Mongoose", version: "6.11.2" }
  };

  console.log('Connecting to MongoDB');
  await mongoose.connect(uri, mongooseOpts);
  console.log('Connected to MongoDB');
});

afterAll(async () => {
  console.log('Closing MongoDB connection in jest.setup.js...');
  await mongoose.connection.close();
  await mongod.stop();
  console.log('MongoDB connection closed and server stopped successfully.');
});

beforeEach(async () => {
  console.log('Clearing all collections');
  const collections = mongoose.connection.collections;
  for (const key in collections) {
    const collection = collections[key];
    await collection.deleteMany();
  }
  console.log('All collections cleared');
});

console.log('Finished jest.setup.js');
--- End of jest.setup.js ---

--- Start of .babelrc ---
{
  "presets": [
    ["@babel/preset-env", {
      "targets": {
        "node": "current"
      }
    }]
  ]
}
--- End of .babelrc ---

--- Start of .env ---
PORT=5000
#MONGODB_URI=mongodb+srv://admin:25789Mongo.@cluster0.vnj7kes.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0
JWT_SECRET=6ImJuH2edC6W3CPuFZF0j6w5tw+dq45B2zNHYOlxuCU/wa/nVC3pYedO7T7ZxRrKJizz3PWwtE9edCkvH2XI2A==
MONGODB_URI=mongodb://admin:25789Mongo.@ac-wrlsrkm-shard-00-00.vnj7kes.mongodb.net:27017,ac-wrlsrkm-shard-00-01.vnj7kes.mongodb.net:27017,ac-wrlsrkm-shard-00-02.vnj7kes.mongodb.net:27017/?authSource=admin&replicaSet=atlas-134uku-shard-0&retryWrites=true&w=majority&appName=Cluster0&ssl=true
MONGODB_TEST_URI=mongodb://admin:25789Mongo.@ac-wrlsrkm-shard-00-00.vnj7kes.mongodb.net:27017,ac-wrlsrkm-shard-00-01.vnj7kes.mongodb.net:27017,ac-wrlsrkm-shard-00-02.vnj7kes.mongodb.net:27017/?authSource=admin&replicaSet=atlas-134uku-shard-0&retryWrites=true&w=majority&appName=TestCluster&ssl=true

--- End of .env ---

--- Start of .env.example ---
PORT=5000
JWT_SECRET=your_jwt_secret_here
MONGODB_URI=your_mongodb_uri_here
MONGODB_TEST_URI=your_mongodb_test_uri_here
--- End of .env.example ---

--- Start of .eslintrc.js ---
module.exports = {
    env: {
      node: true,
      es2021: true,
      jest: true,
    },
    extends: ['eslint:recommended'],
    parserOptions: {
      ecmaVersion: 12,
      sourceType: 'module',
    },
    rules: {
      // Aquí puedes añadir o modificar reglas según tus preferencias
    },
  };
--- End of .eslintrc.js ---

--- Start of .nvmrc ---
20.15.0
--- End of .nvmrc ---

--- Start of babel.config.js ---
module.exports = {
    presets: [
      ['@babel/preset-env', { targets: { node: 'current' } }],
    ],
  };
--- End of babel.config.js ---

--- Start of jest.config.js ---
module.exports = {
  moduleNameMapper: {
    '\\.json$': '<rootDir>/test/__mocks__/jsonMock.js',
    '^ci-info$': '<rootDir>/test/__mocks__/ci-info.js',
  },
  testEnvironment: 'node',
  setupFilesAfterEnv: ['./jest.setup.js'],
  testTimeout: 60000,
  collectCoverage: true,
  collectCoverageFrom: ['src/**/*.js'],
  coverageDirectory: 'coverage',
  coverageReporters: ['text', 'lcov'],
  maxWorkers: '50%',
  transform: {
    '^.+\\.js$': ['babel-jest', { configFile: './babel.config.js' }],
  },
  transformIgnorePatterns: [
    '/node_modules/(?!(ci-info)/)',
  ],
  verbose: true,
  bail: 1,
  forceExit: true,
  detectOpenHandles: true,
  clearMocks: true,
  resetMocks: true,
  restoreMocks: true,
  testPathIgnorePatterns: ['/node_modules/', '/dist/'],
  globalSetup: './jest.global-setup.js',
  globalTeardown: './jest.global-teardown.js',
};
--- End of jest.config.js ---

